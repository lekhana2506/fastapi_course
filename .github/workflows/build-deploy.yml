name: Build and Deploy code

on: [push, pull_request]

jobs:
  job1:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
      DATABASE_PORT: 5432  # Updated to match the exposed port in Docker Compose
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
      TEST_DATABASE: ${{ secrets.TEST_DATABASE }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: '${{ secrets.DATABASE_NAME }}_test'
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2

      - name: say hi to lekhana
        run: echo "hello lekhana"

      - name: setup python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Debug DB Credentials
      - name: Debug DB Credentials
        run: |
          echo "DATABASE_HOSTNAME: $DATABASE_HOSTNAME"
          echo "DATABASE_PORT: $DATABASE_PORT"
          echo "DATABASE_USERNAME: $DATABASE_USERNAME"
          echo "DATABASE_NAME: $DATABASE_NAME"
          echo "TEST_DATABASE: $TEST_DATABASE"

      # Debug environment variables
      - name: Debug Environment Variables
        run: |
          echo "SECRET_KEY: $SECRET_KEY"
          echo "ALGORITHM: $ALGORITHM"
          echo "ACCESS_TOKEN_EXPIRE_MINUTES: $ACCESS_TOKEN_EXPIRE_MINUTES"

      # Check if Postgres is ready and accessible
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h $DATABASE_HOSTNAME -p $DATABASE_PORT -U $DATABASE_USERNAME -d "${DATABASE_NAME}_test"; do
            echo "Waiting for PostgreSQL to be ready... (current time: $(date))"
            sleep 5
          done
          echo "PostgreSQL is ready"

      # Verify PostgreSQL connection (test with the test database)
      - name: Test PostgreSQL connection
        run: |
          PGPASSWORD=$DATABASE_PASSWORD psql -h $DATABASE_HOSTNAME -p $DATABASE_PORT -U $DATABASE_USERNAME -d "${DATABASE_NAME}_test" -c "SELECT 1"
        env:
          PGPASSWORD: ${{ secrets.DATABASE_PASSWORD }}

      # Print Python package versions for debugging
      - name: Check Python packages
        run: |
          python -m pip show pytest
          python -m pip show psycopg2

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

      - name: Debug Import Issues
        run: |
          python -c "import sys; print(sys.path)"
          python -c "from app.main import myapp; print('myapp imported successfully')"

      # Run tests with pytest
      - name: test with pytest
        run: |
          pip install pytest
          pytest --maxfail=1 --disable-warnings -q
